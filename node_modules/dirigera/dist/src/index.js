"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDirigeraClient = void 0;
// const promises_1 = __importDefault(require("readline/promises"));
const os_1 = __importDefault(require("os"));
const authCode_1 = require("./authCode");
const mdnsDiscovery_1 = require("./mdnsDiscovery");
const ws_1 = require("./ws");
const hub_1 = __importDefault(require("./api/hub"));
const devices_1 = __importDefault(require("./api/devices"));
const lights_1 = __importDefault(require("./api/lights"));
const outlets_1 = __importDefault(require("./api/outlets"));
const controllers_1 = __importDefault(require("./api/controllers"));
const speakers_1 = __importDefault(require("./api/speakers"));
const blinds_1 = __importDefault(require("./api/blinds"));
const airPurifiers_1 = __importDefault(require("./api/airPurifiers"));
const repeaters_1 = __importDefault(require("./api/repeaters"));
const motionSensors_1 = __importDefault(require("./api/motionSensors"));
const deviceSets_1 = __importDefault(require("./api/deviceSets"));
const rooms_1 = __importDefault(require("./api/rooms"));
const scenes_1 = __importDefault(require("./api/scenes"));
const music_1 = __importDefault(require("./api/music"));
const users_1 = __importDefault(require("./api/users"));
async function createDirigeraClient({ gatewayIP, accessToken, }) {
    const ip = gatewayIP ?? (await (0, mdnsDiscovery_1.discoverGatewayIP)());
    const { got } = await import('got');
    const gotInstance = got.extend({
        prefixUrl: `https://${ip}:8443/v1`,
        headers: {
            ...(accessToken ? { authorization: `Bearer ${accessToken}` } : null),
        },
        https: {
            rejectUnauthorized: false,
        },
        hooks: {
            beforeError: [
                (error) => {
                    if (error.code === 'ERR_NON_2XX_3XX_RESPONSE' &&
                        error?.response?.body) {
                        error.name = 'DirigeraError';
                        error.message = `${error.response.body}`;
                    }
                    return error;
                },
            ],
        },
    });
    return {
        async authenticate() {
            const codeVerifier = (0, authCode_1.generateCodeVerifier)();
            const codeChallenge = (0, authCode_1.calculateCodeChallenge)(codeVerifier);
            const { code } = await gotInstance
                .get(`oauth/authorize`, {
                searchParams: {
                    audience: 'homesmart.local',
                    response_type: 'code',
                    code_challenge: codeChallenge,
                    code_challenge_method: authCode_1.CODE_CHALLENGE_METHOD,
                },
            })
                .json();
            //const rl = promises_1.default.createInterface({
              //  input: process.stdin,
               // output: process.stdout,
            //});
            // await rl.question('Press the Action Button on the bottom of your Dirigera Hub and then press the Enter button here');
            // rl.close();
            const { access_token: accessToken } = await gotInstance
                .post(`oauth/token`, {
                form: {
                    code,
                    name: os_1.default.hostname(),
                    grant_type: 'authorization_code',
                    code_verifier: codeVerifier,
                },
            })
                .json();
            return accessToken;
        },
        async home() {
            return (await gotInstance.get(`home`).json());
        },
        hub: (0, hub_1.default)(gotInstance),
        devices: (0, devices_1.default)(gotInstance),
        lights: (0, lights_1.default)(gotInstance),
        outlets: (0, outlets_1.default)(gotInstance),
        controllers: (0, controllers_1.default)(gotInstance),
        speakers: (0, speakers_1.default)(gotInstance),
        blinds: (0, blinds_1.default)(gotInstance),
        airPurifiers: (0, airPurifiers_1.default)(gotInstance),
        repeaters: (0, repeaters_1.default)(gotInstance),
        motionSensors: (0, motionSensors_1.default)(gotInstance),
        deviceSets: (0, deviceSets_1.default)(gotInstance),
        rooms: (0, rooms_1.default)(gotInstance),
        scenes: (0, scenes_1.default)(gotInstance),
        music: (0, music_1.default)(gotInstance),
        users: (0, users_1.default)(gotInstance),
        startListeningForUpdates(callback) {
            if (!accessToken) {
                throw new Error('Access token is missing.');
            }
            (0, ws_1.initializeWebSocket)({
                ip,
                accessToken,
                callback,
            });
        },
        stopListeningForUpdates() {
            (0, ws_1.closeWebSocket)();
        },
    };
}
exports.createDirigeraClient = createDirigeraClient;
