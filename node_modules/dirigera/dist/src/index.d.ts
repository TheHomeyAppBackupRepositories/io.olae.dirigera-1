import type { Home } from './types/Home';
export type DirigeraClient = Awaited<ReturnType<typeof createDirigeraClient>>;
export type { AirPurifier } from './types/AirPurifier';
export type { Blinds } from './types/Blinds';
export type { Capabilities } from './types/Capabilities';
export type { Controller } from './types/Controller';
export type { Device } from './types/Device';
export type { DeviceSet } from './types/DeviceSet';
export type { Home } from './types/Home';
export type { Hub } from './types/Hub';
export type { Light } from './types/Light';
export type { MotionSensor } from './types/MotionSensor';
export type { Music } from './types/Music';
export type { Outlet } from './types/Outlet';
export type { Repeater } from './types/Repeater';
export type { Room } from './types/Room';
export type { Scene } from './types/Scene';
export type { Speaker } from './types/Speaker';
export type { User } from './types/User';
export declare function createDirigeraClient({ gatewayIP, accessToken, }: {
    gatewayIP?: string;
    accessToken?: string;
}): Promise<{
    authenticate(): Promise<string>;
    home(): Promise<Home>;
    hub: {
        status(): Promise<import("./types/Hub").Hub>;
        checkFirmwareUpdate(): Promise<void>;
        installFirmwareUpdate(): Promise<void>;
    };
    devices: {
        list(): Promise<import("./types/Device").Device[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/Device").Device>;
        setCustomName({ id, customName, }: {
            id: string;
            customName: string;
        }): Promise<void>;
        setAttributes({ id, attributes, transitionTime, }: {
            id: string;
            attributes: Record<string, any>;
            transitionTime?: number;
        }): Promise<unknown>;
    };
    lights: {
        list(): Promise<import("./types/Light").Light[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/Light").Light>;
        setIsOn({ id, isOn }: {
            id: string;
            isOn: boolean;
        }): Promise<void>;
        setLightLevel({ id, lightLevel, transitionTime, }: {
            id: string;
            lightLevel: number;
            transitionTime?: number;
        }): Promise<void>;
        setLightTemperature({ id, colorTemperature, transitionTime, }: {
            id: string;
            colorTemperature: number;
            transitionTime?: number;
        }): Promise<void>;
        setLightColor({ id, colorHue, colorSaturation, transitionTime, }: {
            id: string;
            colorHue: number;
            colorSaturation: number;
            transitionTime?: number;
        }): Promise<void>;
    };
    outlets: {
        list(): Promise<import("./types/Outlet").Outlet[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/Outlet").Outlet>;
        setIsOn({ id, isOn }: {
            id: string;
            isOn: boolean;
        }): Promise<void>;
    };
    controllers: {
        list(): Promise<import("./types/Controller").Controller[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/Controller").Controller>;
    };
    speakers: {
        list(): Promise<import("./types/Speaker").Speaker[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/Speaker").Speaker>;
        setVolume({ id, volume }: {
            id: string;
            volume: number;
        }): Promise<void>;
        setPlayback({ id, playback, }: {
            id: string;
            playback: "playbackIdle" | "playbackPlaying" | "playbackPaused" | "playbackNext" | "playbackPrevious" | "playbackBuffering";
        }): Promise<void>;
    };
    blinds: {
        list(): Promise<import("./types/Blinds").Blinds[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/Blinds").Blinds>;
        setCurrentLevel({ id, blindsCurrentLevel, }: {
            id: string;
            blindsCurrentLevel: number;
        }): Promise<void>;
        setTargetLevel({ id, blindsTargetLevel, }: {
            id: string;
            blindsTargetLevel: number;
        }): Promise<void>;
        setState({ id, blindsState, }: {
            id: string;
            blindsState: "stopped" | "up" | "down";
        }): Promise<void>;
    };
    airPurifiers: {
        list(): Promise<import("./types/AirPurifier").AirPurifier[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/AirPurifier").AirPurifier>;
        setFanMode({ id, fanMode, }: {
            id: string;
            fanMode: "auto" | "manual" | "off";
        }): Promise<void>;
        setMotorState({ id, motorState, }: {
            id: string;
            motorState: number;
        }): Promise<void>;
        setChildLock({ id, childLock, }: {
            id: string;
            childLock: boolean;
        }): Promise<void>;
        setStatusLight({ id, statusLight, }: {
            id: string;
            statusLight: boolean;
        }): Promise<void>;
    };
    repeaters: {
        list(): Promise<import("./types/Repeater").Repeater[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/Repeater").Repeater>;
    };
    motionSensors: {
        list(): Promise<import("./types/MotionSensor").MotionSensor[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/MotionSensor").MotionSensor>;
        setOnDuration({ id, onDuration, }: {
            id: string;
            onDuration: number;
        }): Promise<void>;
        setScheduleOn({ id, scheduleOn, }: {
            id: string;
            scheduleOn: boolean;
        }): Promise<void>;
        setSchedule({ id, schedule, }: {
            id: string;
            schedule: {
                onCondition: {
                    time: string;
                };
                offCondition: {
                    time: string;
                };
            };
        }): Promise<void>;
    };
    deviceSets: {
        list(): Promise<import("./types/DeviceSet").DeviceSet[]>;
        setIsOn({ id, isOn }: {
            id: string;
            isOn: boolean;
        }): Promise<unknown>;
        setAttributes({ id, attributes, transitionTime, }: {
            id: string;
            attributes: Record<string, any>;
            transitionTime?: number;
        }): Promise<unknown>;
    };
    rooms: {
        list(): Promise<import("./types/Room").Room[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/Room").Room>;
        setIsOn({ id, deviceType, isOn, }: {
            id: string;
            deviceType: "gateway" | "shortcutController" | "airPurifier" | "blinds" | "light" | "outlet" | "repeater" | "speaker" | "lightController" | "soundController" | "blindsController" | "motionSensor";
            isOn: boolean;
        }): Promise<unknown>;
        setAttributes({ id, deviceType, attributes, transitionTime, }: {
            id: string;
            deviceType?: "gateway" | "shortcutController" | "airPurifier" | "blinds" | "light" | "outlet" | "repeater" | "speaker" | "lightController" | "soundController" | "blindsController" | "motionSensor";
            attributes: Record<string, any>;
            transitionTime?: number;
        }): Promise<unknown>;
    };
    scenes: {
        list(): Promise<import("./types/Scene").Scene[]>;
        get({ id }: {
            id: string;
        }): Promise<import("./types/Scene").Scene>;
        trigger({ id }: {
            id: string;
        }): Promise<void>;
        undo({ id }: {
            id: string;
        }): Promise<void>;
    };
    music: {
        get(): Promise<import("./types/Music").Music>;
    };
    users: {
        list(): Promise<import("./types/User").User[]>;
        getCurrentUser(): Promise<import("./types/User").User>;
        setCurrentUserName({ name }: {
            name: string;
        }): Promise<void>;
        delete({ id }: {
            id: string;
        }): Promise<void>;
    };
    startListeningForUpdates(callback: (updateEvent: any) => void): void;
    stopListeningForUpdates(): void;
}>;
